/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tpa_juego;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.DefaultCaret;
import servidor.*;
/**
 *
 * @author rogelionoris
 */
public class ServerWindow extends javax.swing.JFrame implements MessageListener {

    private ServerSocket serverSocket;    
    int ID=1;
    Vector<ClienteThread> clientes;
    
    Thread serverThread;
    /**
     * Creates new form ServerWindow
     */
    public ServerWindow() {
        initComponents();
        
        serverThread = new Thread(){            
            @Override
            public void run(){
                conexion(7777);
            }
        };
        
        serverThread.start();
    }
    
    public void conexion(int puerto){
        try {
            
            clientes = new Vector<ClienteThread>();
                        
            serverSocket = new ServerSocket(puerto);
            System.out.println("Servidor escuchando en el puerto: "+puerto);
            while(true){
                Socket socket = serverSocket.accept();
                txtMensajes.append("Un usuario se ha conectado\n");
                System.out.println("Un usuario se ha conectado");
                
                ClienteThread cliente = new ClienteThread(socket);
                cliente.ID = ID;
                ID++;
                cliente.addListener(this);
                clientes.add(cliente);
            }
            
            
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
    }    
    
    public void cerrarConexion(){
        try{
            serverSocket.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }


    @Override
    public void onClientReceiveMessage(ClienteThread evt, String msg) {
        
        String[] arrMsg = msg.split("[|]");
        
        txtMensajes.append("Debug: "+msg+"\n");
        try{
            if(arrMsg.length > 1){
        
                if(arrMsg[0].equals("msg")){
                    txtMensajes.append(arrMsg[1]+"\n");
                }else
                if(arrMsg[0].equals("setplayer")){
                    if(evt.player != null){
                        evt.player.delete();
                    }
                    evt.player = new Player(panel, Integer.valueOf(arrMsg[1]), Integer.valueOf(arrMsg[2]), arrMsg[3]);
                    txtMensajes.append("Colocando Jugador\n");
                }else            
                if(arrMsg[0].equals("move")){
                    if(arrMsg.length == 2){
                        if(arrMsg[1].equals("left")) evt.player.move(-1,0);
                        if(arrMsg[1].equals("right")) evt.player.move(1,0);
                        if(arrMsg[1].equals("up")) evt.player.move(0,-1);
                        if(arrMsg[1].equals("down")) evt.player.move(0,1);
                        txtMensajes.append("Moviendo Jugador");                    
                    }
                }
            }
        }catch(Exception ex){
            txtMensajes.append("Comando no valido \n");
        }
        
        //DefaultCaret caret = (DefaultCaret) txtMensajes.getCaret();
        txtMensajes.setCaretPosition(txtMensajes.getDocument().getLength());
                
    }
    
    public ClienteThread searchClient(ClienteThread cliente){
        for(int i=0; i<clientes.size(); i++){
            ClienteThread c = clientes.get(i);
            if(c == cliente){
                return c;
            }
        }
        return null;
    }

    @Override
    public void onClientReceivePvtMessage(String nickname, String msg) {
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMensajes = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 718, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        txtMensajes.setColumns(20);
        txtMensajes.setRows(5);
        jScrollPane1.setViewportView(txtMensajes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel;
    private javax.swing.JTextArea txtMensajes;
    // End of variables declaration//GEN-END:variables

}
